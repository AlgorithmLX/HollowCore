buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath 'org.spongepowered:mixingradle:0.7.32'
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.7.20-RC'
        classpath "gradle.plugin.com.github.jengelman.gradle.plugins:shadow:7.0.0"
    }
}

plugins {
    id "org.jetbrains.kotlin.jvm" version "1.8.10"
    id "org.jetbrains.kotlin.plugin.serialization" version "1.8.10"
}

apply plugin: 'kotlin'
apply plugin: 'maven-publish'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'org.parchmentmc.librarian.forgegradle'

group = 'ru.hollowhorizon'
version = '1.1.0'
archivesBaseName = 'hc'

java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8.
compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"

configurations {
    shade
    implementation.extendsFrom shade
}

mixin {
    add sourceSets.main, "hc.refmap.json"
    config "hc.mixins.json"

    checks.interfaces = true

    debug = true
    debug.countInjections = true
    debug.verbose = true
    debug.export = true
}

minecraft {
    mappings channel: 'parchment', version: '2022.03.06-1.16.5'

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            arg "-mixin.config=hc.mixins.json"
            mods { hollowcore { source sourceSets.main } }
        }
        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            arg "-mixin.config=hc.mixins.json"
            mods { hollowcore { source sourceSets.main } }
        }
        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'hollowcore', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods { hollowcore { source sourceSets.main } }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
    maven {
        url = 'https://mvnrepository.com/artifact/org.apache.groovy/groovy'
    }
    flatDir { dirs 'libs' }
}

dependencies {
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    minecraft 'net.minecraftforge:forge:1.16.5-36.2.39'

    shade 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.8.10'

    shade 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4'
    shade 'org.jetbrains.kotlinx:kotlinx-serialization-core:1.5.0'

    shade "com.labymedia:ultralight-java-base:0.4.12"
    shade "com.labymedia:ultralight-java-databind:0.4.12"
    shade "com.labymedia:ultralight-java-gpu:0.4.12"
    shade "com.labymedia:ultralight-java-glfw-opengl-util:0.4.12"

    shade 'org.apache.groovy:groovy:4.0.8'
}

shadowJar {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)

    configurations = [project.configurations.shade]
    archiveClassifier = ''

    def shadowPackages = [
            'kotlin',
            'org.intellij',
            'org.jetbrains'
    ]

    shadowPackages.forEach {
        relocate(it, "ru.hollowhorizon.repack.$it")
    }

    mergeServiceFiles()
    exclude '**/module-info.class'

    finalizedBy 'reobfShadowJar'
}

reobf {
    jar {}
    shadowJar {}
}

jar {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)

    archiveClassifier = ''
    from sourceSets.main.output
    exclude '**/module-info.class'

    from { configurations.shade.collect { it.isDirectory() ? it : zipTree(it) } }

    manifest {
        attributes([
                "Specification-Title"     : "hollowcore",
                "Specification-Vendor"    : "Hollow Horizon",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : archiveVersion,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "hc.mixins.json"
        ])
    }

    finalizedBy 'reobfJar'
}

tasks.register('devJar', Jar) {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)

    from sourceSets.main.output
    exclude '**/module-info.class'

    archiveClassifier = 'dev'

    manifest {
        attributes([
                "Specification-Title"     : "hollowcore",
                "Specification-Vendor"    : "Hollow Horizon",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : archiveVersion,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "hc.mixins.json"
        ])
    }

    finalizedBy('reobfJar')
}
reobf.create 'devJar'

tasks.register('sourcesJar', Jar) {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)

    from sourceSets.main.java.srcDirs
    archiveClassifier = 'src'
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = Arrays.asList("-Xjvm-default=all", "-Xopt-in=kotlin.RequiresOptIn")
        jvmTarget = "1.8"
        languageVersion = "1.7"
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) { p ->

            artifact shadowJar
            artifact devJar
            artifact sourcesJar
        }
    }
    repositories {
        maven {
            url "${project.projectDir.absolutePath.replace("\\", "/")}/builded_hc"
        }
    }
}