plugins {
    id "org.jetbrains.kotlin.jvm" version "1.7.20"
    id "org.jetbrains.kotlin.plugin.serialization" version "1.7.20"
    id "dev.architectury.loom" version "0.12.0-SNAPSHOT"
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

apply plugin: "dev.architectury.loom"
apply plugin: 'kotlin'

group = project.mod_group
version = project.mod_version
archivesBaseName = project.mod_id

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_16

configurations {
    shade
    implementation.extendsFrom shade
}

loom {
    silentMojangMappingsLicense()

    forge {
        mixinConfigs = ["hc.mixins.json"]
        dataGen { mod project.mod_id }
    }

    runs {
        client {
            vmArgs '-XX:+AllowEnhancedClassRedefinition'
            vmArgs '-XX:HotswapAgent=fatjar'
            vmArgs '-Dfile.encoding=UTF-8'

            property("mixin.debug.export", "true")

            environment = "client"
            configName = "Minecraft Client"

            runDir = "run"
            source = sourceSets.main
            ideConfigGenerated = true

            client()
        }
    }

    launches {
        data {
            arg "--existing", file("src/main/resources").absolutePath
        }
    }
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
    maven { url = 'https://maven.parchmentmc.org' }
    flatDir { dirs 'libs' }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"

    mappings loom.layered {
        mappings "ru.hollowhorizon:hollow-mappings:1.16.5@zip"
        parchment("org.parchmentmc.data:parchment-1.16.5:2022.03.06")
    }

    forge "net.minecraftforge:forge:${project.forge_version}"

    shade 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.7.22'
    shade 'org.jetbrains.kotlin:kotlin-scripting-jvm-host:1.7.22'
    shade 'org.jetbrains.kotlin:kotlin-scripting-jvm:1.7.20-RC'
    shade 'org.jetbrains.kotlin:kotlin-compiler-embeddable:1.7.22'
    shade 'org.jetbrains.kotlin:kotlin-script-runtime:1.7.22'
    shade 'org.jetbrains.kotlin:kotlin-scripting-compiler-embeddable:1.7.22'
    shade 'org.jetbrains.kotlin:kotlin-scripting-dependencies:1.7.22'
    shade 'org.jetbrains.kotlin:kotlin-scripting-dependencies-maven:1.7.22'
    shade 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4'
    shade 'org.jetbrains.kotlinx:kotlinx-serialization-core:1.4.1'
    shade 'gnu.trove:trove:1.0.2'
    shade 'us.ihmc:jassimp:4.0.0-ihmc6'
    shade 'org.joml:joml:1.10.2'

    implementation('com.google.guava:guava') {
        version {
            strictly '21.0'
        }
    }

    shade 'org.cadixdev:lorenz:0.5.8'
    shade 'org.cadixdev:bombe:0.4.4'
    shade 'me.jamiemansfield:string:0.1.0'
    shade 'com.upokecenter:cbor:4.5.2'
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    def targetVersion = Integer.valueOf(sourceCompatibility.toString())
    options.release = targetVersion
}

java {
    withSourcesJar()
}

jar {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    from { configurations.shade.collect { it.isDirectory() ? it : zipTree(it) } }

    manifest {
        attributes([
                "Specification-Title"     : project.mod_id,
                "Specification-Vendor"    : project.mod_author,
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : version,
                "Implementation-Vendor"   : project.mod_author,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

shadowJar {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    configurations = [project.configurations.shade]

    relocate 'gnu.trove', 'ru.hollowhorizon.gnu.trove'

    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}