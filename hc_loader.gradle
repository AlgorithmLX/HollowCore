if (!project.properties["hc.version"]) {
    throw new IllegalStateException("you should add the parameter 'hc.version=<VERSION_PLACEHOLDER>' with the value of the library version to gradle.properties")
}

buildscript {
    repositories {
        mavenCentral()
        maven { url = 'https://maven.minecraftforge.net/' }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+'
        classpath "gradle.plugin.com.github.jengelman.gradle.plugins:shadow:7.0.0"
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'com.github.johnrengelman.shadow'

configurations {
    implementation.extendsFrom(library)
}

minecraft.runs.all { lazyToken('minecraft_classpath') { configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator) } }

def HC_MAVEN = project.projectDir.toPath().parent.resolve("HollowCore").resolve("builded_hc").toFile().absolutePath.replace("\\", "/")

repositories {
    mavenCentral()
    flatDir { dirs 'libs' }
    maven {
        url HC_MAVEN
    }
}

dependencies {
    library 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    library 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4'
    library 'org.jetbrains.kotlinx:kotlinx-serialization-core:1.5.0'

    library 'org.apache.groovy:groovy:4.0.8'

    implementation fg.deobf("ru.hollowhorizon:hc:${project.properties["hc.version"]}:dev")
}

shadowJar {
    archiveClassifier.set('')
    configurations = []

    def shadowPackages = [
            'kotlin',
            'org.intellij',
            'org.jetbrains'
    ]

    shadowPackages.forEach {
        relocate(it, "ru.hollowhorizon.repack.$it")
    }

    finalizedBy('reobfShadowJar')
}

reobf {
    jar {}
    shadowJar {}
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs = Arrays.asList("-Xjvm-default=all", "-Xopt-in=kotlin.RequiresOptIn")
    }
}